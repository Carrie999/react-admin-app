{"version":3,"sources":["components/LoadingIndicator/index.js","pages/Home/Loadable.js","pages/Login/Loadable.js","components/Main/index.js","components/App.js","utils/serviceWorker.js","index.js","pages/Login/index.js","components/Main/styles/index.module.less","components/LoadingIndicator/styles/index.module.less"],"names":["LoadingIndicator","react_default","a","createElement","className","styles","loadingBox","Loadable","loader","__webpack_require__","e","then","bind","loading","components_LoadingIndicator","delay","Promise","resolve","Main","props","layout","main","react_router","Login","path","exact","component","Home","App","components_Main","Component","withRouter","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","store","Store","require","fakeAuth","isAuthenticated","get","authenticate","cb","this","setTimeout","signout","PrivateRoute","_ref","rest","Object","_Users_orion_Desktop_visualCloud_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_6___default","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","assign","to","pathname","state","from","redirectToReferrer","login","set","expire","_this","setState","onClick","module","exports","p"],"mappings":"+QAqBeA,MAVf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOC,YAAvB,gCCJWC,MAAS,CACtBC,OAAQ,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YACdC,QAAS,kBAAMZ,EAAAC,EAAAC,cAACW,EAAD,OACfC,MAAO,MCHMR,MAAS,CACtBC,OAAQ,kBAAMQ,QAAAC,UAAAN,KAAAF,EAAAG,KAAA,WACdC,QAAS,kBAAMZ,EAAAC,EAAAC,cAACW,EAAD,OACfC,MAAO,MCoBMG,MAhBf,SAAcC,GAEZ,OACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQhB,UAAWC,IAAOgB,MACxBpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KAGErB,EAAAC,EAAAC,cAACoB,EAAA,aAAD,CAAcC,KAAK,QAAQC,OAAK,EAACC,UAAWC,IAC5C1B,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOE,KAAK,SAASC,OAAK,EAACC,UAAWH,OClBxCK,mLAEF,OACE3B,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAAC0B,EAAD,cAJUC,aAUHC,cAAWH,GCJNI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACPrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,KACEtC,EAAAC,EAAAC,cAACqC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC,6KEhIbC,EAAQ,IAAIC,EADJC,EAAQ,IAAaD,OAG7BE,EAAW,CACfC,gBAAiBJ,EAAMK,IAAI,gBAAiB,EAC5CC,aAFe,SAEFC,GACXC,KAAKJ,iBAAkB,EACvBK,WAAWF,EAAI,MAEjBG,QANe,SAMPH,GACNC,KAAKJ,iBAAkB,EACvBK,WAAWF,EAAI,OAINI,EAAe,SAAAC,GAAA,IAAc9B,EAAd8B,EAAGlC,UAAyBmC,EAA5BC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,sBAC1BI,EAAA9D,EAAAC,cAAC8D,EAAA,EAADH,OAAAI,OAAA,GAAWL,EAAX,CAAiBvB,OAAQ,SAACnB,GAAD,OACM,IAA7BgC,EAASC,gBACLY,EAAA9D,EAAAC,cAAC2B,EAAcX,GACf6C,EAAA9D,EAAAC,cAAC8D,EAAA,EAAD,CAAUE,GAAI,CACdC,SAAU,SACVC,MAAO,CAAEC,KAAMnD,EAAMe,kBAKvBX,6MACJ8C,MAAQ,CACNE,oBAAoB,KAEtBC,MAAQ,WACNxB,EAAMyB,IAAI,cAAc,GAExBzB,EAAM0B,OAAO,aAAc,QAC3BvB,EAASG,aAAa,WACpBqB,EAAKC,SAAS,iBAAO,CACnBL,oBAAoB,gFAIjB,IACCD,GAASd,KAAKrC,MAAMe,SAASmC,OAAS,CAAEC,KAAM,CAAEF,SAAU,OAA1DE,KAGR,OAA2B,IAFId,KAAKa,MAA5BE,mBAGCP,EAAA9D,EAAAC,cAAC8D,EAAA,EAAD,CAAUE,GAAIG,IAIrBN,EAAA9D,EAAAC,cAAA,WACE6D,EAAA9D,EAAAC,cAAA,6CACA6D,EAAA9D,EAAAC,cAAA,UAAQ0E,QAASrB,KAAKgB,OAAtB,kBAzBY1C,aA+BLP,gCC3DfuD,EAAAC,QAAiBtE,EAAAuE,EAAuB,8DCAxCF,EAAAC,QAAiBtE,EAAAuE,EAAuB","file":"static/js/main.7b1221ca.chunk.js","sourcesContent":["/**\n *\n * LoadingIndicator\n *\n */\n\nimport React from 'react';\nimport styles from './styles/index.module.less';\n\n// import PropTypes from 'prop-types';\n\nfunction LoadingIndicator() {\n  return (\n    <div className={styles.loadingBox}>\n      正在加载...\n    </div>\n  );\n}\n\nLoadingIndicator.propTypes = {};\n\nexport default LoadingIndicator\n","/**\n *\n * Asynchronously loads the component for Header\n *\n */\nimport React from 'react';\nimport Loadable from 'react-loadable';\nimport LoadingIndicator from '../../components/LoadingIndicator';\n\nexport default Loadable({\n  loader: () => import('./index'),\n  loading: () => <LoadingIndicator />,\n  delay: 100\n});\n","/**\n *\n * Asynchronously loads the component for Header\n *\n */\nimport React from 'react';\nimport Loadable from 'react-loadable';\nimport LoadingIndicator from '../../components/LoadingIndicator';\n\nexport default Loadable({\n  loader: () => import('./index'),\n  loading: () => <LoadingIndicator />,\n  delay: 100\n});\n","/**\n *\n * Main\n *\n */\n\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport { Layout } from \"antd\";\nimport { PrivateRoute } from \"../../pages/Login\";\n\nimport styles from './styles/index.module.less';\nimport Home from '../../pages/Home/Loadable';\nimport Login from '../../pages/Login/Loadable';\n// import PropTypes from 'prop-types';\n\nfunction Main(props) {\n  // console.log(Home)\n  return (\n    <Layout className={styles.main}>\n      <Switch>\n        {/* <Route path=\"/\" exact component={Home} />\n        // <Route path=\"/tool/:id\" component={ToolDetail} /> */}\n        <PrivateRoute path=\"/home\" exact component={Home} />\n        <Route path=\"/login\" exact component={Login} />\n      </Switch>\n    </Layout>\n  );\n}\n\nMain.propTypes = {};\n\nexport default Main\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom'\nimport { Layout } from 'antd'\n\nimport Main from './Main'\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout>\n        <Main />\n      </Layout>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport 'normalize.css'\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './utils/serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom'\nconst Store = require('locallyjs').Store,\n      store = new Store();\n\nconst fakeAuth = {\n  isAuthenticated: store.get('isLoggedIn') || false,\n  authenticate(cb) {\n    this.isAuthenticated = true\n    setTimeout(cb, 100)\n  },\n  signout(cb) {\n    this.isAuthenticated = false\n    setTimeout(cb, 100)\n  }\n}\n\nexport const PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route {...rest} render={(props) => (\n    fakeAuth.isAuthenticated === true\n      ? <Component {...props} />\n      : <Redirect to={{\n        pathname: '/login',\n        state: { from: props.location }\n      }} />\n  )} />\n)\n\nclass Login extends Component {\n  state = {\n    redirectToReferrer: false\n  }\n  login = () => {\n    store.set('isLoggedIn', true);\n    // 3天过期\n    store.expire('isLoggedIn', 1000*60*60*24*3); \n    fakeAuth.authenticate(() => {\n      this.setState(() => ({\n        redirectToReferrer: true\n      }))\n    })\n  }\n  render() { \n    const { from } = this.props.location.state || { from: { pathname: '/' } }\n    const { redirectToReferrer } = this.state\n\n    if (redirectToReferrer === true) {\n      return <Redirect to={from} />\n    }\n\n    return (\n      <div>\n        <p>You must log in to view the page</p>\n        <button onClick={this.login}>Log in</button>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","module.exports = __webpack_public_path__ + \"static/media/index.module.9cb86c9f.less\";","module.exports = __webpack_public_path__ + \"static/media/index.module.f2b3e265.less\";"],"sourceRoot":""}